# -*- coding: utf-8 -*-
# Generated by Django 1.11.5 on 2017-12-16 18:51
import django.db.migrations.operations.special
import django.db.models.deletion
from django.conf import settings
from django.core.exceptions import ObjectDoesNotExist
from django.db import migrations, models

import django_date_extensions.fields

import core.validators


# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# core.migrations.0009_auto_20150605_0922
def migrate_data(apps, schema_editor):
    Sponsor = apps.get_model("core", "Sponsor")
    Coach = apps.get_model("core", "Coach")

    # Updating sponsors
    for sponsor in Sponsor.objects.all():
        sponsor.event_page_content.sponsors.add(sponsor)

    # Updating coaches
    for coach in Coach.objects.all():
        coach.event_page_content.coaches.add(coach)

# core.migrations.0022_move_event_page_data
def move_data(apps, schema_editor):

    def move_event_page_data_to_event(event):
        """Copies data from event page to event"""
        try:
            page = event.eventpage
        except ObjectDoesNotExist:
            print('Missing event page:', event.name, event.date, event.pk)
        else:
            event.page_title = page.title or ''
            event.page_description = page.description or ''
            event.page_main_color = page.main_color or ''
            event.page_custom_css = page.custom_css or ''
            event.page_url = page.url or ''
            event.is_page_live = page.is_live
            event.save()

    Event = apps.get_model('core', 'Event')
    EventPageContent = apps.get_model('core', 'EventPageContent')
    EventPageMenu = apps.get_model('core', 'EventPageMenu')
    for event in Event.objects.select_related('eventpage'):
        move_event_page_data_to_event(event)
    for content in EventPageContent.objects.select_related('page__event'):
        content.event = content.page.event
        content.save()
    for menu in EventPageMenu.objects.select_related('page__event'):
        menu.event = menu.page.event
        menu.save()


class Migration(migrations.Migration):

    replaces = [('core', '0001_initial'), ('core', '0002_event_photo'), ('core', '0003_auto_20140907_1359'), ('core', '0004_event_photo_credit'), ('core', '0005_story'), ('core', '0006_auto_20141014_0754'), ('core', '0007_auto_20141025_1521'), ('core', '0008_auto_20150608_1958'), ('core', '0009_auto_20150608_2054'), ('core', '0008_auto_20150609_2124'), ('core', '0010_merge'), ('core', '0011_auto_20150814_0439'), ('core', '0008_auto_20150605_0921'), ('core', '0009_auto_20150605_0922'), ('core', '0010_auto_20150605_0936'), ('core', '0012_merge'), ('core', '0013_auto_20151203_1109'), ('core', '0014_auto_20151203_1122'), ('core', '0015_contactemail'), ('core', '0016_auto_20151206_2044'), ('core', '0017_auto_20160214_2008'), ('core', '0018_auto_20160521_1930'), ('core', '0019_remove_sponsor_position'), ('core', '0020_auto_20160815_1701'), ('core', '0021_auto_20170106_1833'), ('core', '0022_move_event_page_data'), ('core', '0023_auto_20170106_1931')]

    initial = True

    dependencies = [
        ('auth', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('first_name', models.CharField(blank=True, max_length=30)),
                ('last_name', models.CharField(blank=True, max_length=30)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Organizer',
                'verbose_name_plural': 'Organizers',
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('date', django_date_extensions.fields.ApproximateDateField(blank=True, null=True)),
                ('city', models.CharField(max_length=200)),
                ('country', models.CharField(max_length=200)),
                ('latlng', models.CharField(blank=True, max_length=30, null=True)),
                ('is_on_homepage', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name_plural': 'List of events',
            },
        ),
        migrations.CreateModel(
            name='EventPage',
            fields=[
                ('event', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='core.Event')),
                ('title', models.CharField(blank=True, max_length=200, null=True)),
                ('description', models.TextField(blank=True, default='Django Girls is a one-day workshop about programming in Python and Django tailored for women.', null=True)),
                ('main_color', models.CharField(blank=True, default='FF9400', help_text='Main color of the chapter in HEX', max_length=6, null=True)),
                ('custom_css', models.TextField(blank=True, null=True)),
                ('url', models.CharField(blank=True, max_length=200, null=True)),
                ('is_live', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Website',
            },
        ),
        migrations.CreateModel(
            name='EventPageContent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('content', models.TextField(help_text='HTML allowed')),
                ('background', models.ImageField(blank=True, help_text='Optional background photo', null=True, upload_to='event/backgrounds/')),
                ('position', models.PositiveIntegerField(help_text='Position of the block on the website')),
                ('is_public', models.BooleanField(default=False)),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.EventPage')),
            ],
            options={
                'ordering': ('position',),
                'verbose_name': 'Website Content',
            },
        ),
        migrations.CreateModel(
            name='EventPageMenu',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('url', models.CharField(help_text='http://djangogirls.org/city/<the value you enter here>', max_length=255)),
                ('position', models.PositiveIntegerField(help_text='Order of menu')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.EventPage')),
            ],
            options={
                'ordering': ('position',),
                'verbose_name': 'Website Menu',
            },
        ),
        migrations.CreateModel(
            name='Sponsor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=200, null=True)),
                ('logo', models.ImageField(blank=True, help_text='Make sure logo is not bigger than 200 pixels wide', null=True, upload_to='event/sponsors/')),
                ('url', models.URLField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('position', models.PositiveIntegerField(help_text='Position of the sponsor')),
                ('event_page_content', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.EventPageContent')),
            ],
            options={
                'ordering': ('position',),
            },
        ),
        migrations.AddField(
            model_name='event',
            name='main_organizer',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='main_organizer', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='event',
            name='team',
            field=models.ManyToManyField(blank=True, null=True, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='event',
            name='photo',
            field=models.ImageField(blank=True, null=True, upload_to=b'event/cities/'),
        ),
        migrations.CreateModel(
            name='Postmortem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attendees_count', models.IntegerField(verbose_name='Number of attendees')),
                ('applicants_count', models.IntegerField(verbose_name='Number of applicants')),
                ('discovery', models.TextField(blank=True, null=True, verbose_name='What was the most important thing you discovered during the workshop?')),
                ('feedback', models.TextField(blank=True, null=True, verbose_name='How we can make DjangoGirls better?')),
                ('costs', models.TextField(blank=True, help_text='We only collect this information for statistics and advice for future organizers.', null=True, verbose_name='What are the total costs of the event?')),
                ('comments', models.TextField(blank=True, null=True, verbose_name='Anything else you want to share with us?')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Event')),
            ],
        ),
        migrations.AlterField(
            model_name='event',
            name='photo',
            field=models.ImageField(blank=True, help_text=b'The best would be 356 x 210px', null=True, upload_to=b'event/cities/'),
        ),
        migrations.AddField(
            model_name='event',
            name='photo_credit',
            field=models.CharField(blank=True, max_length=200, null=True),
        ),
        migrations.CreateModel(
            name='Story',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('post_url', models.URLField()),
                ('image', models.ImageField(upload_to='stories/')),
                ('created', models.DateField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Coach',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('twitter_handle', models.CharField(blank=True, help_text='No @, No http://, just username', max_length=200, null=True)),
                ('photo', models.ImageField(blank=True, help_text='For best display keep it square', null=True, upload_to='event/coaches/')),
                ('url', models.URLField(blank=True, null=True)),
                ('event_page_content', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.EventPageContent')),
            ],
            options={
                'ordering': ('?',),
                'verbose_name_plural': 'Coaches',
            },
        ),
        migrations.AddField(
            model_name='event',
            name='photo_link',
            field=models.URLField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='event',
            name='email',
            field=models.EmailField(blank=True, max_length=75, null=True),
        ),
        migrations.AlterField(
            model_name='event',
            name='team',
            field=models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='event',
            name='team',
            field=models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='event',
            name='photo',
            field=models.ImageField(blank=True, help_text='The best would be 356 x 210px', null=True, upload_to='event/cities/'),
        ),
        migrations.AlterField(
            model_name='event',
            name='photo',
            field=models.ImageField(blank=True, help_text='The best would be 356 x 210px', null=True, upload_to='event/cities/'),
        ),
        migrations.AlterField(
            model_name='event',
            name='team',
            field=models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='eventpagecontent',
            name='coaches',
            field=models.ManyToManyField(to='core.Coach', verbose_name='Coaches'),
        ),
        migrations.AddField(
            model_name='eventpagecontent',
            name='sponsors',
            field=models.ManyToManyField(to='core.Sponsor', verbose_name='Sponsors'),
        ),
        migrations.RunPython(
            code=migrate_data,
        ),
        migrations.RemoveField(
            model_name='coach',
            name='event_page_content',
        ),
        migrations.RemoveField(
            model_name='sponsor',
            name='event_page_content',
        ),
        migrations.AlterField(
            model_name='eventpagecontent',
            name='page',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content', to='core.EventPage'),
        ),
        migrations.AlterField(
            model_name='eventpagemenu',
            name='page',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='menu', to='core.EventPage'),
        ),
        migrations.AddField(
            model_name='event',
            name='is_deleted',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='eventpage',
            name='is_deleted',
            field=models.BooleanField(default=False),
        ),
        migrations.CreateModel(
            name='ContactEmail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
                ('email', models.EmailField(max_length=128)),
                ('sent_to', models.EmailField(max_length=128)),
                ('message', models.TextField()),
                ('contact_type', models.CharField(choices=[('chapter', 'Django Girls Local Organizers'), ('support', 'Django Girls HQ (Support Team)')], default='chapter', max_length=20, verbose_name='Who do you want to contact?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('sent_successfully', models.BooleanField(default=True)),
                ('event', models.ForeignKey(blank=True, help_text='required for contacting a chapter', null=True, on_delete=django.db.models.deletion.CASCADE, to='core.Event')),
            ],
            options={
                'ordering': ('-created_at',),
            },
        ),
        migrations.AddField(
            model_name='story',
            name='content',
            field=models.TextField(null=True),
        ),
        migrations.AddField(
            model_name='story',
            name='is_story',
            field=models.BooleanField(default=True),
        ),
        migrations.AlterField(
            model_name='event',
            name='date',
            field=django_date_extensions.fields.ApproximateDateField(null=True, validators=[core.validators.validate_approximatedate]),
        ),
        migrations.AlterField(
            model_name='story',
            name='image',
            field=models.ImageField(null=True, upload_to='stories/'),
        ),
        migrations.AlterModelOptions(
            name='coach',
            options={'ordering': ('name',), 'verbose_name_plural': 'Coaches'},
        ),
        migrations.AlterModelOptions(
            name='event',
            options={'ordering': ('pk',), 'verbose_name_plural': 'List of events'},
        ),
        migrations.AlterModelOptions(
            name='eventpage',
            options={'ordering': ('title',), 'verbose_name': 'Website'},
        ),
        migrations.AlterModelOptions(
            name='sponsor',
            options={'ordering': ('name',)},
        ),
        migrations.AddField(
            model_name='event',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, null=True),
        ),
        migrations.RemoveField(
            model_name='sponsor',
            name='position',
        ),
        migrations.AlterModelOptions(
            name='postmortem',
            options={'verbose_name': 'Statistics', 'verbose_name_plural': 'Statistics'},
        ),
        migrations.AlterField(
            model_name='event',
            name='photo_credit',
            field=models.CharField(blank=True, help_text="Only use pictures with a <a href='https://creativecommons.org/licenses/'>creative commons license</a>.", max_length=200, null=True),
        ),
        migrations.AddField(
            model_name='event',
            name='is_page_live',
            field=models.BooleanField(default=False, verbose_name='page published?'),
        ),
        migrations.AddField(
            model_name='event',
            name='page_custom_css',
            field=models.TextField(blank=True, verbose_name='custom CSS rules'),
        ),
        migrations.AddField(
            model_name='event',
            name='page_description',
            field=models.TextField(blank=True, default='Django Girls is a one-day workshop about programming in Python and Django tailored for women.', verbose_name='description'),
        ),
        migrations.AddField(
            model_name='event',
            name='page_main_color',
            field=models.CharField(blank=True, default='FF9400', help_text='Main color of the chapter in HEX', max_length=6, verbose_name='main color'),
        ),
        migrations.AddField(
            model_name='event',
            name='page_title',
            field=models.CharField(blank=True, max_length=200, verbose_name='title'),
        ),
        migrations.AddField(
            model_name='event',
            name='page_url',
            field=models.CharField(blank=True, help_text='Will be used as part of the event URL (djangogirls.org/______/)', max_length=200, verbose_name='URL slug'),
        ),
        migrations.AlterField(
            model_name='event',
            name='email',
            field=models.EmailField(blank=True, max_length=75, null=True, verbose_name='event email'),
        ),
        migrations.AlterField(
            model_name='event',
            name='is_deleted',
            field=models.BooleanField(default=False, verbose_name='deleted?'),
        ),
        migrations.AlterField(
            model_name='event',
            name='is_on_homepage',
            field=models.BooleanField(default=False, verbose_name='visible on homepage?'),
        ),
        migrations.AlterField(
            model_name='event',
            name='latlng',
            field=models.CharField(blank=True, max_length=30, null=True, verbose_name='latitude and longitude'),
        ),
        migrations.AlterField(
            model_name='event',
            name='photo_credit',
            field=models.CharField(blank=True, help_text="Only use pictures with a <a href='https://creativecommons.org/licenses/'>Creative Commons license</a>.", max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='event',
            name='photo_link',
            field=models.URLField(blank=True, null=True, verbose_name='photo URL'),
        ),
        migrations.AddField(
            model_name='eventpagecontent',
            name='event',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='content', to='core.Event'),
        ),
        migrations.AddField(
            model_name='eventpagemenu',
            name='event',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='menu', to='core.Event'),
        ),
        migrations.RunPython(
            code=move_data,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AlterModelOptions(
            name='event',
            options={'ordering': ('-date',), 'verbose_name_plural': 'List of events'},
        ),
    ]
