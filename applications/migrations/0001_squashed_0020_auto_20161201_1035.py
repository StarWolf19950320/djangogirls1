# -*- coding: utf-8 -*-
# Generated by Django 1.11.5 on 2017-12-16 18:57
from __future__ import unicode_literals

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# applications.migrations.0018_auto_20160628_2154
def deduplicate_applications(apps, schema_editor):
    Application = apps.get_model("applications", "Application")
    applications = Application.objects.values_list("form", "email").distinct()

    for form, email in applications:
        duplicates = (
            Application.objects
            .filter(form=form, email=email)
            .values_list('id', flat=True)
            .order_by('state', 'created')[1:]
        )
        Application.objects.filter(id__in=list(duplicates)).delete()


class Migration(migrations.Migration):

    replaces = [('applications', '0001_initial'), ('applications', '0002_auto_20150308_2229'), ('applications', '0003_auto_20150311_2109'), ('applications', '0004_auto_20150322_1050'), ('applications', '0005_auto_20150322_1439'), ('applications', '0006_auto_20150406_2042'), ('applications', '0007_auto_20150406_2121'), ('applications', '0008_auto_20150406_2126'), ('applications', '0009_auto_20150407_2021'), ('applications', '0010_auto_20150608_1958'), ('applications', '0011_auto_20150614_1752'), ('applications', '0012_auto_20150618_2041'), ('applications', '0013_auto_20150624_2134'), ('applications', '0014_auto_20150814_0439'), ('applications', '0015_auto_20151203_1109'), ('applications', '0016_auto_20160403_1244'), ('applications', '0017_auto_20160617_1646'), ('applications', '0018_auto_20160628_2154'), ('applications', '0019_auto_20160628_2208'), ('applications', '0020_auto_20161201_1035')]

    initial = True

    dependencies = [
        ('core', '0001_squashed_0023_auto_20170106_1931'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Application',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Form',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text_header', models.CharField(default=b'Apply for a spot at Django Girls [City]!', max_length=255)),
                ('text_description', models.TextField(default=b"Yay! We're so excited you want to be a part of our workshop. Please mind that filling out the form below does not give you a place on the workshop, but a chance to get one. The application process is open from {open_from} until {open_until}. If you're curious about the criteria we use to choose applicants, you can read about it on <a href='http://blog.djangogirls.org/post/91067112853/djangogirls-how-we-scored-applications'>Django Girls blog</a>. Good luck!")),
                ('open_from', models.DateTimeField(null=True, verbose_name=b'Application process is open from')),
                ('open_until', models.DateTimeField(null=True, verbose_name=b'Application process is open until')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.EventPage')),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField(verbose_name='Question')),
                ('help_text', models.TextField(blank=True, default='', verbose_name='Additional help text to the question?')),
                ('question_type', models.CharField(choices=[('paragraph', 'Paragraph'), ('text', 'Long text'), ('choices', 'Choices'), ('email', 'Email')], max_length=50, verbose_name='Type of the question')),
                ('is_required', models.BooleanField(default=True, verbose_name='Is the answer to the question required?')),
                ('choices', models.TextField(blank=True, default='', help_text="Used only with 'Choices' question type", verbose_name='List all available options, separated with semicolon (;)')),
                ('is_multiple_choice', models.BooleanField(default=False, help_text="Used only with 'Choices' question type", verbose_name='Are there multiple choices allowed?')),
                ('order', models.PositiveIntegerField(help_text='Position of the question')),
                ('form', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='applications.Form')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.AddField(
            model_name='application',
            name='form',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='applications.Form'),
        ),
        migrations.AddField(
            model_name='answer',
            name='application',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='applications.Application'),
        ),
        migrations.AddField(
            model_name='answer',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='applications.Question'),
        ),
        migrations.AlterField(
            model_name='form',
            name='text_description',
            field=models.TextField(default=b"Yay! We're so excited you want to be a part of our workshop. Please mind that filling out the form below does not give you a place on the workshop, but a chance to get one. The application process is open from {INSERT DATE} until {INSERT DATE}. If you're curious about the criteria we use to choose applicants, you can read about it on <a href='http://blog.djangogirls.org/post/91067112853/djangogirls-how-we-scored-applications'>Django Girls blog</a>. Good luck!"),
        ),
        migrations.AddField(
            model_name='application',
            name='state',
            field=models.CharField(choices=[(b'submitted', b'Submitted'), (b'accepted', b'Accepted'), (b'rejected', b'Rejected')], max_length=50, null=True, verbose_name=b'State of the application'),
        ),
        migrations.CreateModel(
            name='Score',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.FloatField(default=0, help_text='5 being the most positive, 1 being the most negative.', validators=[django.core.validators.MaxValueValidator(5), django.core.validators.MinValueValidator(0)])),
                ('comment', models.TextField(blank=True, help_text='Any extra comments?', null=True)),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name=b'scores', to='applications.Application')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name=b'scores', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='score',
            unique_together=set([('user', 'application')]),
        ),
        migrations.AlterModelOptions(
            name='answer',
            options={'ordering': ('question__order',)},
        ),
        migrations.AddField(
            model_name='application',
            name='email',
            field=models.EmailField(blank=True, max_length=254, null=True),
        ),
        migrations.AddField(
            model_name='application',
            name='newsletter_optin',
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name='application',
            name='state',
            field=models.CharField(choices=[(b'submitted', b'Submitted'), (b'accepted', b'Accepted'), (b'rejected', b'Rejected'), (b'waitlisted', b'Waiting list')], max_length=50, null=True, verbose_name=b'State of the application'),
        ),
        migrations.AlterField(
            model_name='application',
            name='state',
            field=models.CharField(choices=[(b'submitted', b'Submitted'), (b'accepted', b'Accepted'), (b'rejected', b'Rejected'), (b'waitlisted', b'Waiting list')], default=b'submitted', max_length=50, null=True, verbose_name=b'State of the application'),
        ),
        migrations.CreateModel(
            name='Email',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(max_length=255)),
                ('text', models.TextField(help_text='You can use HTML syntax in this message. Preview on the right.', verbose_name='Content of the email')),
                ('recipients_group', models.CharField(choices=[('submitted', 'Application submitted'), ('accepted', 'Application accepted'), ('rejected', 'Application rejected'), ('waitlisted', 'Application on waiting list'), ('declined', 'Applicant declined'), ('waiting', 'RSVP: Waiting for response'), ('yes', 'RSVP: Confirmed attendance'), ('no', 'RSVP: Rejected invitation')], help_text='Only people assigned to chosen group will receive this email.', max_length=50, verbose_name='Recipients')),
                ('number_of_recipients', models.IntegerField(default=0, null=True)),
                ('successfuly_sent', models.TextField(blank=True, null=True)),
                ('failed_to_sent', models.TextField(blank=True, null=True)),
                ('sent_from', models.EmailField(max_length=254)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('sent', models.DateTimeField(blank=True, null=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name=b'author', to=settings.AUTH_USER_MODEL)),
                ('form', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='applications.Form')),
            ],
        ),
        migrations.AddField(
            model_name='form',
            name='confirmation_mail',
            field=models.TextField(default='Hi there!This is a confirmation of your application to <a href="http://djangogirls.org/{city}">Django Girls {CITY}</a>. Yay! That\'s a huge step already, we\'re proud of you!\n\nMind that this is not a confirmation of participation in the event, but a confirmation that we received your application.\n\nYou\'ll receive an email from the team that organizes Django Girls {CITY} soon. You can always reach them by answering to this email or by writing to {your event mail}.\nFor your reference, we\'re attaching your answers below.\n\nHugs, cupcakes and high-fives!\nDjango Girls', help_text='Mail will be sent from your event mail.\nAlso the answers will be attached.'),
        ),
        migrations.AddField(
            model_name='application',
            name='rsvp_no_code',
            field=models.CharField(max_length=24, null=True),
        ),
        migrations.AddField(
            model_name='application',
            name='rsvp_status',
            field=models.CharField(choices=[('waiting', 'RSVP: Waiting for response'), ('yes', 'RSVP: Confirmed attendance'), ('no', 'RSVP: Rejected invitation')], default='waiting', max_length=50, verbose_name='RSVP status'),
        ),
        migrations.AddField(
            model_name='application',
            name='rsvp_yes_code',
            field=models.CharField(max_length=24, null=True),
        ),
        migrations.AlterField(
            model_name='application',
            name='state',
            field=models.CharField(choices=[(b'submitted', b'Application submitted'), (b'accepted', b'Application accepted'), (b'rejected', b'Application rejected'), (b'waitlisted', b'Application on waiting list')], default=b'submitted', max_length=50, null=True, verbose_name=b'State of the application'),
        ),
        migrations.AddField(
            model_name='application',
            name='number',
            field=models.PositiveIntegerField(blank=True, default=1),
        ),
        migrations.AlterField(
            model_name='application',
            name='state',
            field=models.CharField(choices=[('submitted', 'Application submitted'), ('accepted', 'Application accepted'), ('rejected', 'Application rejected'), ('waitlisted', 'Application on waiting list')], default='submitted', max_length=50, null=True, verbose_name='State of the application'),
        ),
        migrations.AlterField(
            model_name='form',
            name='open_from',
            field=models.DateTimeField(null=True, verbose_name='Application process is open from'),
        ),
        migrations.AlterField(
            model_name='form',
            name='open_until',
            field=models.DateTimeField(null=True, verbose_name='Application process is open until'),
        ),
        migrations.AlterField(
            model_name='form',
            name='text_description',
            field=models.TextField(default="Yay! We're so excited you want to be a part of our workshop. Please mind that filling out the form below does not give you a place on the workshop, but a chance to get one. The application process is open from {INSERT DATE} until {INSERT DATE}. If you're curious about the criteria we use to choose applicants, you can read about it on <a href='http://blog.djangogirls.org/post/91067112853/djangogirls-how-we-scored-applications'>Django Girls blog</a>. Good luck!"),
        ),
        migrations.AlterField(
            model_name='form',
            name='text_header',
            field=models.CharField(default='Apply for a spot at Django Girls [City]!', max_length=255),
        ),
        migrations.AlterField(
            model_name='application',
            name='state',
            field=models.CharField(choices=[('submitted', 'Application submitted'), ('accepted', 'Application accepted'), ('rejected', 'Application rejected'), ('waitlisted', 'Application on waiting list'), ('declined', 'Applicant declined')], default='submitted', max_length=50, null=True, verbose_name='State of the application'),
        ),
        migrations.AlterField(
            model_name='form',
            name='page',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.EventPage', unique=True),
        ),
        migrations.AlterField(
            model_name='form',
            name='page',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='core.EventPage'),
        ),
        migrations.RunPython(
            code=deduplicate_applications,
        ),
        migrations.AlterField(
            model_name='application',
            name='rsvp_no_code',
            field=models.CharField(blank=True, max_length=24, null=True),
        ),
        migrations.AlterField(
            model_name='application',
            name='rsvp_yes_code',
            field=models.CharField(blank=True, max_length=24, null=True),
        ),
        migrations.AlterUniqueTogether(
            name='application',
            unique_together=set([('form', 'email')]),
        ),
    ]
